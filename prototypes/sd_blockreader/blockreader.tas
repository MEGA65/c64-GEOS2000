; Ralph Egas - MEGA65 SD card block read test

!to "blockreader.bin", cbm
!cpu 6502

		*=$c000

		jmp start

; ==========================================================================================

block_buffer		; c003
		!fi 256, 0

; ==========================================================================================

start
		; enable MEGA65 registers
		lda #$47
		sta $d02f
		lda #$53
		sta $d02f

		; map sector buffer @ $de00
		lda #$81
		sta $D680

		; load d81 offset from sd start offset that with add t40;s0 footprint
		; into byte offset
		clc
		lda $d68c
		adc #$00
		sta $d681
		lda $d68d
		adc #$40
		sta $d682
		lda $d68e
		adc #$06
		sta $d683
		lda $d68f
		adc #$00
		sta $d684

		; read sector
		lda #$02
		sta $d680

		; copy block to block_buffer
		ldy #0
loop1
		lda $de00,y
		sta block_buffer,y

		iny
		bne loop1

		; unmap sector buffer @ $de00
		lda #$82
		sta $D680

		; disable MEGA65 registers
		lda #0
		sta $d02f

		rts

; ==========================================================================================

sdwaitawhile
		jmp sdtimeoutreset

; ==========================================================================================

sdtimeoutreset
		lda #$00
		sta $0300
		sta $0301
		lda #$f7
		sta $0302
		rts

; ==========================================================================================

sdreadytest
		; check if SD card is ready, or if timeout has occurred
		; C is set if ready.
		; Z is set if timeout has occurred.
		lda $d680
		and #$03
		beq sdisready
		inc $0300
		bne sr1
		inc $0301
		bne sr1
		inc $0302
		bne sr1

		; timeout
		lda #$00 ; set Z

sr1		clc
		rts
sdisready
		sec
		rts

; ==========================================================================================

sdreset
		; try SD-HC mode first
sdr1	; fall back to SD mode
		lda #$42
		sta $d680
		; fall through		

sd_resetsequence
		; write $00 to $D680 to start reset
		lda #$00
		sta $D680
		jsr sdtimeoutreset
re1		jsr sdreadytest
		bcs re1done	; success, so return
		bne re1		; not timed out, so keep trying
		rts 		; timeout, so return
re1done	
		; write $01 to $D680 to complete reset
		lda #$01
		sta $D680
		jsr sdtimeoutreset
re2		jsr sdreadytest
		bcs re2done	; success, so return
		bne re2		; not timed out, so keep trying
		rts 		; timeout, so return
re2done
		; give card some time to settle after reset, otherwise 
		; reading sectors will fail
		jsr sdwaitawhile

		pha
		lda #$81
		sta $D680
		pla

		; write $02 to $D680 to read MBR as a test of reset
		lda #$02
		sta $D680
		jsr sdtimeoutreset
		
re3		; allow time for read to happen
		lda $d680
		jsr sdreadytest
		bcs redone	; success, so return
		bne re3		; not timed out, so keep trying
		; timeout -- so call reset again
		rts
redone
		sec
		rts

; ==========================================================================================

sd_readsector
		; check if sd card is busy
		lda $d680
		and #$01
		bne rsbusyfail

		; try reading sector fast the first time
		jmp rs4

redoread
		; when retrying, introduce a delay.  This seems to be needed often
		; when reading the first sector after SD card reset.  
		ldx #$f0
		ldy #$00
r1		iny
		bne r1
		inx
		bne r1

rs4
		; ask for sector to be read
		lda #$02
		sta $d680

		; wait for sector to be read
		jsr sdtimeoutreset
rs3		
		jsr sdreadytest
		bcs rsread
		bne rs3
		jmp rereadsector

rsread
		lda $d680
		and #$01
		bne rs3

		; check that we read 512 bytes
		lda $d688
		lda $d689

		cmp #$02
		bne redoread

		sec
		rts

rereadsector
		; reset sd card and try again
		jsr sdreset		
		jmp rs4

rsbusyfail
		; fail
		clc 
		rts
